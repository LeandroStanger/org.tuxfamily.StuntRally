From f7703d8d3f30c34479e5ee0965bff8f8ed85c024 Mon Sep 17 00:00:00 2001
From: Michael Straube <straubem@gmx.de>
Date: Thu, 17 Nov 2016 19:54:59 +0100
Subject: [PATCH] Fix gcc6 build errors

---
 source/ogre/CarModel_Create.cpp |  2 +-
 source/vdrift/cartire.cpp       | 32 ++++++++++++++++----------------
 source/vdrift/model_obj.cpp     |  2 +-
 source/vdrift/texture.h         |  2 +-
 4 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/source/ogre/CarModel_Create.cpp b/source/ogre/CarModel_Create.cpp
index 834eac71..f53d88f8 100644
--- a/source/ogre/CarModel_Create.cpp
+++ b/source/ogre/CarModel_Create.cpp
@@ -130,7 +130,7 @@ void CarModel::Load(int startId)
 
 	///  load config .car
 	string pathCar;
-	pApp->gui->GetCarPath(&pathCar, 0, 0, sDirname, pApp->mClient);  // force orig for newtorked games
+	pApp->gui->GetCarPath(&pathCar, 0, 0, sDirname, pApp->mClient.get() != 0);  // force orig for newtorked games
 	LoadConfig(pathCar);
 	
 	
diff --git a/source/vdrift/cartire.cpp b/source/vdrift/cartire.cpp
index dd6dd487..253d098f 100644
--- a/source/vdrift/cartire.cpp
+++ b/source/vdrift/cartire.cpp
@@ -114,25 +114,25 @@ MATHVECTOR<Dbl,3> CARTIRE::GetForce(
 	alpha = -atan2(hub_velocity[1], denom) * 180.0/PI_d;
 
 	/*crash dyn obj--*/
-	if (isnan(alpha) || isnan(1.f/sigma_hat))
+	if (std::isnan(alpha) || std::isnan(1.f/sigma_hat))
 	{
 		MATHVECTOR<Dbl,3> outvec(0, 0, 0);
 		return outvec;
 	}
-	assert(!isnan(alpha));
+	assert(!std::isnan(alpha));
 
 	Dbl gamma = current_camber * 180.0/PI_d;
 
 	//  beckman method for pre-combining longitudinal and lateral forces
-	Dbl s = sigma / sigma_hat;  assert(!isnan(s));
-	Dbl a = alpha / alpha_hat;  assert(!isnan(a));
+	Dbl s = sigma / sigma_hat;  assert(!std::isnan(s));
+	Dbl a = alpha / alpha_hat;  assert(!std::isnan(a));
 
 	Dbl rho = std::max( sqrt( s*s+a*a ), 0.0001);  //avoid divide by zero
-	assert(!isnan(rho));
+	assert(!std::isnan(rho));
 
 	Dbl max_Fx(0), max_Fy(0), max_Mz(0);
-	Dbl Fx = (s / rho) * Pacejka_Fx( rho*sigma_hat, Fz,        friction_coeff, max_Fx );  assert(!isnan(Fx));
-	Dbl Fy = (a / rho) * Pacejka_Fy( rho*alpha_hat, Fz, gamma, friction_coeff, max_Fy );  assert(!isnan(Fy));
+	Dbl Fx = (s / rho) * Pacejka_Fx( rho*sigma_hat, Fz,        friction_coeff, max_Fx );  assert(!std::isnan(Fx));
+	Dbl Fy = (a / rho) * Pacejka_Fy( rho*alpha_hat, Fz, gamma, friction_coeff, max_Fy );  assert(!std::isnan(Fy));
 	Dbl Mz = Pacejka_Mz( sigma, alpha, Fz, gamma, friction_coeff, max_Mz );
 
 	if (slips)  // out vis
@@ -158,8 +158,8 @@ MATHVECTOR<Dbl,3> CARTIRE::GetForce(
 	{
 		//scale down forces to fit into the maximum
 		Dbl sc = maxforce / combforce;
-		Fx *= sc;  assert(!isnan(Fx));  max_Fx *= sc;  //vis only
-		Fy *= sc;  assert(!isnan(Fy));	max_Fy *= sc;
+		Fx *= sc;  assert(!std::isnan(Fx));  max_Fx *= sc;  //vis only
+		Fy *= sc;  assert(!std::isnan(Fy));	max_Fy *= sc;
 		//std::cout << "Limiting " << combforce << " to " << maxforce << std::endl;
 	}/**/
 
@@ -180,14 +180,14 @@ MATHVECTOR<Dbl,3> CARTIRE::GetForce(
 		Fx = 0;
 	}else
 	{	Dbl scale = sqrt(1.0-(Fy/max_Fy)*(Fy/max_Fy));
-		if (isnan(scale))
+		if (std::isnan(scale))
 			Fx = 0;
 		else
 			Fx = Fx*scale;
 	}/**/
 
-	assert(!isnan(Fx));
-	assert(!isnan(Fy));
+	assert(!std::isnan(Fx));
+	assert(!std::isnan(Fy));
 
 	/*if ( hub_velocity.Magnitude () < 0.1 )
 	{
@@ -279,7 +279,7 @@ Dbl CARTIRE::Pacejka_Fx (Dbl sigma, Dbl Fz, Dbl friction_coeff, Dbl & maxforce_o
 
 	maxforce_output = D;
 
-	assert(!isnan(Fx));
+	assert(!std::isnan(Fx));
 	return Fx;
 }
 
@@ -290,7 +290,7 @@ Dbl CARTIRE::Pacejka_Fy (Dbl alpha, Dbl Fz, Dbl gamma, Dbl friction_coeff, Dbl &
 
 	Dbl D = ( a[1]*Fz+a[2] ) *Fz*friction_coeff;
 	Dbl B = a[3]*sin ( 2.0*atan ( Fz/a[4] ) ) * ( 1.0-a[5]*std::abs ( gamma ) ) / ( a[0]* ( a[1]*Fz+a[2] ) *Fz );
-	assert(!isnan(B));
+	assert(!std::isnan(B));
 	Dbl E = a[6]*Fz+a[7];
 	Dbl S = alpha + a[8]*gamma+a[9]*Fz+a[10];
 	Dbl Sv = ( ( a[11]*Fz+a[12] ) *gamma + a[13] ) *Fz+a[14];
@@ -300,7 +300,7 @@ Dbl CARTIRE::Pacejka_Fy (Dbl alpha, Dbl Fz, Dbl gamma, Dbl friction_coeff, Dbl &
 
 	//LogO("Fy: "+fToStr(alpha,4,6)+" "+fToStr(Fz,4,6)+" "+fToStr(gamma,4,6)+" "+fToStr(friction_coeff,4,6)+" "+fToStr(maxforce_output,4,6));
 
-	assert(!isnan(Fy));
+	assert(!std::isnan(Fy));
 	return Fy;
 }
 
@@ -318,7 +318,7 @@ Dbl CARTIRE::Pacejka_Mz (Dbl sigma, Dbl alpha, Dbl Fz, Dbl gamma, Dbl friction_c
 
 	maxforce_output = D+Sv;
 
-	assert(!isnan(Mz));
+	assert(!std::isnan(Mz));
 	return Mz;
 }
 
diff --git a/source/vdrift/model_obj.cpp b/source/vdrift/model_obj.cpp
index 338d1220..e67c1db0 100644
--- a/source/vdrift/model_obj.cpp
+++ b/source/vdrift/model_obj.cpp
@@ -205,7 +205,7 @@ bool MODEL_OBJ::Save(const std::string & strFileName, std::ostream & error_outpu
 	std::ofstream f(strFileName.c_str());
 	if (!f)
 	{
-		error_output << "Error opening file for writing: " << error_output << endl;
+		error_output << "Error opening file for writing: " << endl;
 		return false;
 	}
 	
diff --git a/source/vdrift/texture.h b/source/vdrift/texture.h
index b21846a7..eda00983 100644
--- a/source/vdrift/texture.h
+++ b/source/vdrift/texture.h
@@ -125,7 +125,7 @@ class TEXTURELIBRARY
 		bool FileExists(const std::string & filename)
 		{
 			std::ifstream f(filename.c_str());
-			return f;
+			return static_cast<bool>(f);
 		}
 
 	public:
-- 
2.17.1

From 97b8c7bae8ee9bfe7ca37828fa440b63a122209f Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Thu, 8 Oct 2015 18:38:01 +0200
Subject: [PATCH] fix vdr trks

---
 source/road/PaceNotesGen.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/road/PaceNotesGen.cpp b/source/road/PaceNotesGen.cpp
index f7cdea64..055fdc8d 100644
--- a/source/road/PaceNotesGen.cpp
+++ b/source/road/PaceNotesGen.cpp
@@ -30,7 +30,7 @@ void PaceNotes::Rebuild(SplineRoad* road, Scene* sc, bool reversed)
 
 	Destroy();
 	
-	if (road->getNumPoints() < 2)
+	if (road->getNumPoints() < 2 || !mTerrain)
 		return;
 
 	//  const, vis
@@ -349,7 +349,7 @@ void PaceNotes::Rebuild(SplineRoad* road, Scene* sc, bool reversed)
 		num = gho.getNumFrames();
 	}
 	
-	if (num > 0)
+	if (num > 0 && mTerrain)
 	{
 		Vector3 pos;
 		//  terrain height
-- 
2.17.1

From f692f46c3c56fc3b626c377fdac6a59433a8499a Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Tue, 13 Oct 2015 17:59:23 +0200
Subject: [PATCH] ed tool, chk odd loop chks

---
 source/ogre/common/Tools.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/source/ogre/common/Tools.cpp b/source/ogre/common/Tools.cpp
index 7203db79..8059e2bb 100644
--- a/source/ogre/common/Tools.cpp
+++ b/source/ogre/common/Tools.cpp
@@ -214,6 +214,14 @@ void CGui::ToolSceneXml()
 		}
 		
 		///  road
+		int iLch = 0;
+		for (n=0; n < rd.mP.size(); ++n)
+			if (rd.mP[n].chkR > 0.f && rd.mP[n].loop > 0)
+				++iLch;
+		//LogO("Road: " + trk + "  Lch " + toStr(iLch));
+		if (iLch % 2 == 1)
+			LogO("Road: " + trk + " Not even loop chks count !  ");
+
 		for (n=0; n < MTRs; ++n)
 		{
 			String s = rd.sMtrRoad[n];
-- 
2.17.1

From 249dc73ca3e865e15b905b14e48c73f8610b7283 Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Thu, 26 Jan 2017 20:16:55 +0100
Subject: [PATCH] fix O freaking out in water

---
 source/ogre/common/Tools.cpp         | 2 +-
 source/vdrift/cardynamics_update.cpp | 7 ++++++-
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/source/ogre/common/Tools.cpp b/source/ogre/common/Tools.cpp
index 8059e2bb..1f172297 100644
--- a/source/ogre/common/Tools.cpp
+++ b/source/ogre/common/Tools.cpp
@@ -428,7 +428,7 @@ void CGui::ToolGhostsConv()
 					TrackFrame tf;
 					tf.time = fr.time;
 					tf.pos = fr.pos;  tf.rot = fr.rot;
-					tf.brake = fr.get(b_braking) > 0 ? 1 : 0;
+					tf.brake = fr.get(b_braking) ? 1 : 0;
 					tf.steer = fr.steer * 127.f;
 					//LogO(toStr(fr.braking)+ " st " +fToStr(fr.steer,2,5));
 
diff --git a/source/vdrift/cardynamics_update.cpp b/source/vdrift/cardynamics_update.cpp
index 92b94b89..0532a873 100644
--- a/source/vdrift/cardynamics_update.cpp
+++ b/source/vdrift/cardynamics_update.cpp
@@ -78,11 +78,16 @@ void CARDYNAMICS::UpdateBuoyancy()
 				body.q.Normalize();//
 			}
 			//LogO(fToStr(body.q.x,2,4)+" "+fToStr(body.q.y,2,4)+" "+fToStr(body.q.z,2,4)+" "+fToStr(body.q.w,2,4));
+
 			//  vel, ang vel
 			btVector3 v = chassis->getLinearVelocity();
 			btVector3 a = chassis->getAngularVelocity();
 			body.v.x = v.getX();  body.v.y = v.getY();  body.v.z = v.getZ();
-			body.omega.x = a.getX();  body.omega.y = a.getY();  body.omega.z = a.getZ();
+			if (vtype == V_Sphere)
+			{	body.omega.SetZero();  // no ang vel
+			}else
+			{	body.omega.x = a.getX();  body.omega.y = a.getY();  body.omega.z = a.getZ();
+			}
 			body.F.SetZero();  body.T.SetZero();
 			
 			//  damp from height vel
-- 
2.17.1

From 4d0545359f778a664b3e4c6cd5a61c4438323519 Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Thu, 26 Jan 2017 22:30:23 +0100
Subject: [PATCH] fixed silent sound for car type camera (e.g. in loops, bonnet
 cam etc.)

---
 source/ogre/FollowCamera.h   | 2 ++
 source/ogre/Update_Poses.cpp | 3 ++-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/source/ogre/FollowCamera.h b/source/ogre/FollowCamera.h
index 7cd2246b..2ded5eda 100644
--- a/source/ogre/FollowCamera.h
+++ b/source/ogre/FollowCamera.h
@@ -87,6 +87,8 @@ public:
 	void Next(bool bPrev = false, bool bMainOnly = false);
 	void setCamera(int ang);
 	
+	bool TypeCar() {  return ca && ca->mType == CAM_Car;  }
+	
 	//  info text formats
 	Ogre::String sFmt_Follow, sFmt_Free, sFmt_ExtAng, sFmt_Arena, sFmt_Car;
 	void updFmtTxt();
diff --git a/source/ogre/Update_Poses.cpp b/source/ogre/Update_Poses.cpp
index bcb4915d..c98fadc0 100644
--- a/source/ogre/Update_Poses.cpp
+++ b/source/ogre/Update_Poses.cpp
@@ -418,7 +418,8 @@ void App::newPoses(float time)  // time only for camera update
 			{
 				Vector3 x,y,z;
 				carPoses[qn][c].camRot.ToAxes(x,y,z);
-				pGame->snd->setCamera(carPoses[qn][c].camPos, -z, y, Vector3::ZERO);
+				bool camCar = carM->fCam && carM->fCam->TypeCar();  // fix
+				pGame->snd->setCamera(carPoses[qn][c].camPos, camCar ? -y : -z, camCar ? -z : y, Vector3::ZERO);
 			}
 		}
 	}
-- 
2.17.1

From 27dbf3de5fbd757f6889290f87a1b73f120a7d37 Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Sat, 28 Jan 2017 15:11:47 +0100
Subject: [PATCH] sphere O, faster steer with handbrake

---
 source/vdrift/cardynamics_update.cpp | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

diff --git a/source/vdrift/cardynamics_update.cpp b/source/vdrift/cardynamics_update.cpp
index 0532a873..38f61900 100644
--- a/source/vdrift/cardynamics_update.cpp
+++ b/source/vdrift/cardynamics_update.cpp
@@ -827,10 +827,14 @@ void CARDYNAMICS::SimulateSphere(Dbl dt)
 			- hov.brakeForce * velMul * brake[0].GetBrakeFactor() * dmgE;
 	//if (rear)  f *= -1.f;
 
-	//  steer  rotate dir
+	float h = brake[0].GetHandbrakeFactor();
+
+	//  steer <> rotate dir
 	float pst = hov.steerForce;  //if (rear)  pst = -pst;
-		if (pipe)  pst *= hov.steerDampP;
-	sphereYaw += steerValue * dt * pst * PI_d/180.f;
+	if (pipe)  pst *= hov.steerDampP;
+
+	float hh = 1.f + 1.0f * sqrt(h);  // factor, faster steer with handbrake
+	sphereYaw += steerValue * hh * dt * pst * PI_d/180.f;
 	MATHVECTOR<Dbl,3> dir(cosf(sphereYaw), -sinf(sphereYaw), 0);
 
 	f *= body.GetMass() * -1.0;
@@ -840,13 +844,12 @@ void CARDYNAMICS::SimulateSphere(Dbl dt)
 
 	//  handbrake damping
 	btVector3 v = chassis->getLinearVelocity();
-	Dbl h = brake[0].GetHandbrakeFactor();
 	if (h > 0.01f)
 	{
-		chassis->applyCentralForce(v * h * -10);
+		chassis->applyCentralForce(v * h * -10.f);
 
 		btVector3 av = chassis->getAngularVelocity();
-		chassis->applyTorque(av * h * -10);
+		chassis->applyTorque(av * h * -10.f);
 	}
 
 	//  side damp --
-- 
2.17.1

From 4df36d6c7520a50142a4fd65541e1bd172100c5e Mon Sep 17 00:00:00 2001
From: CryHam <cryham@gmail.com>
Date: Sun, 12 Feb 2017 20:37:24 +0100
Subject: [PATCH] fix ed crashing on F8 (i can't even :rage:) from pace upd

---
 source/editor/Update_Frame.cpp | 4 +++-
 source/road/PaceNotes.cpp      | 5 ++++-
 source/road/PaceNotes.h        | 1 +
 3 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/source/editor/Update_Frame.cpp b/source/editor/Update_Frame.cpp
index 95c297e2..c380e672 100644
--- a/source/editor/Update_Frame.cpp
+++ b/source/editor/Update_Frame.cpp
@@ -240,7 +240,9 @@ if (pSet->bTrees)
 		bool full = road->RebuildRoadInt();
 		
 		if (full && scn->pace)  // pace
-		{	road->RebuildRoadPace();
+		{
+			scn->pace->SetupTer(scn->terrain);
+			road->RebuildRoadPace();
 			scn->pace->Rebuild(road, scn->sc, pSet->trk_reverse);
 	}	}
 
diff --git a/source/road/PaceNotes.cpp b/source/road/PaceNotes.cpp
index 01c4f727..7729bcda 100644
--- a/source/road/PaceNotes.cpp
+++ b/source/road/PaceNotes.cpp
@@ -221,7 +221,10 @@ void PaceNotes::Setup(SceneManager* sceneMgr, Camera* camera,
 	mSceneMgr = sceneMgr;  mCamera = camera;
 	mTerrain = terrain;  mGui = gui;  mWindow = window;
 }
-
+void PaceNotes::SetupTer(Terrain* terrain)
+{
+	mTerrain = terrain;
+}
 
 ///  Load
 //------------------------------------------------------------------------------------------
diff --git a/source/road/PaceNotes.h b/source/road/PaceNotes.h
index bc95f568..7c61c6f5 100644
--- a/source/road/PaceNotes.h
+++ b/source/road/PaceNotes.h
@@ -61,6 +61,7 @@ public:
 	//  Setup, call this on Init
 	void Setup(Ogre::SceneManager* sceneMgr, Ogre::Camera* camera,
 		Ogre::Terrain* terrain, MyGUI::Gui* gui, Ogre::RenderWindow* window);
+	void SetupTer(Ogre::Terrain* terrain);
 
 	//  Rebuild
 	void Rebuild(SplineRoad* road, Scene* sc, bool reversed);
-- 
2.17.1

